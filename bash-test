# Handle Options
ignore_errors=0
verbose=0
very_verbose=0
while [[ $# -gt 0 ]]; do
  case "$1" in
    -i|--ignore-errors)
      ignore_errors=1
      shift
      ;;
    -v|--verbose)
      verbose=1
      shift
      ;;
    -vv|--very-verbose)
      verbose=1
      very_verbose=1
      shift
      ;;
    --) shift; break ;;
    *) break ;;
  esac
done
! (( ignore_errors )) && set -eE
(( very_verbose )) && set -x


# User Function
startTest() {
  if (( test_active )); then
    endTest
  fi
  
  goal="$1"
  btPrintf "start_test" "$goal"
  
  trap 'test_succeeded=0; endTest' ERR
  test_active=1
  test_succeeded=1
}

# User Function
info() {
  if (( test_active )); then
    endTest
  fi

  msg="$1"
  btPrintf "info" "$msg"
}

# User Function
warn() {
  if (( test_active )); then
    endTest
  fi

  msg="$1"
  btPrintf "warn" "$msg"
}

# User & System Function
endTest() {
  if (( test_active )); then
    trap - ERR
    test_active=0

    btPrintf "end_test" "$goal"
    
    if ! (( test_succeeded )) && ! (( ignore_errors )); then
      exitRoute 1
    fi
  fi
}

# User & System Function
mute() {
  exec 5>&1 6>&2
  exec &> /dev/null
  muted=1
}

# User & System Function
unmute() {
  exec 1>&5 2>&6
  muted=0
}

# System Function --- Do not use
exitRoute() {
  trap - EXIT ERR INT TERM
  rc=$1

  if (( muted )); then
    unmute
  fi
  
  exit $rc
}

# System Function --- Do not use
btPrintf() {
  overwrite_last_line="\r"
  success_indicator="\033[38;2;0;255;0m✔"
  fail_indicator="\033[38;2;255;0;0m✗"
  pending_indicator="\033[38;2;255;255;0m➤"
  info_indicator="\033[38;2;0;255;255m🛈 "
  warn_indicator="\033[38;5;208m⚠️ "
 
  was_muted=0
  if (( muted )); then
    unmute
    was_muted=1
  fi

  if [[ "$1" == "start_test" || "$1" == "end_test" ]] && ! (( verbose )); then
    printf "$overwrite_last_line"
  fi
 
  if [[ "$1" == "end_test" ]] && (( test_succeeded )); then
    printf "$success_indicator " && newline=1
  elif [[ "$1" == "end_test" ]] && ! (( test_succeeded )); then
    printf "$fail_indicator " && newline=1
  elif [[ "$1" == "start_test" ]]; then
    printf "$pending_indicator "
  elif [[ "$1" == "info" ]]; then
    printf "$info_indicator" && newline=1
  elif [[ "$1" == "warn" ]]; then
    printf "$warn_indicator" && newline=1
  fi
  
  if [[ "$1" == "start_test" || "$1" == "end_test" || "$1" == "info" || "$1" == "warn" ]]; then
    shift 1
  fi

  printf "$@\033[0m"

  if (( verbose )) || (( newline )); then
    printf "\n"
    newline=0
  fi

  if (( was_muted )); then
    mute
  fi
}


# Mute if the user requested it 
if ! (( verbose )); then
  mute
fi


# Ensure the user can always SIGINT out
trap 'test_succeeded=0; exitRoute 1' INT
trap 'endTest' EXIT


# Install Coreutils to gather some data if we don't already have it
installCoreutils() {
  dnf install -y --allowerasing coreutils >/dev/null 2>&1 \
    || apt-get install -y --fix-broken coreutils >/dev/null 2>&1
}
set -o pipefail
dpkg -L coreutils >/dev/null 2>&1 || rpm -q coreutils >/dev/null 2>&1 || installCoreutils >/dev/null 2>&1


# Set some default values
test_active=0
test_succeeded=0


# System constants
SCRIPT_PATH="$(readlink -f "$0")"


# User constants
TESTS_DIR="$(dirname "$SCRIPT_PATH")"
PROJECT_DIR="$(dirname "$TESTS_DIR")"
if test -f /.dockerenv; then
  IN_CONTAINER=1
else
  IN_CONTAINER=0
fi


