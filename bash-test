# Handle Options
ignore_errors=0
verbose=0
very_verbose=0
while [[ $# -gt 0 ]]; do
  case "$1" in
    -i|--ignore-errors)
      ignore_errors=1
      shift
      ;;
    -v|--verbose)
      verbose=1
      shift
      ;;
    -vv|--very-verbose)
      verbose=1
      very_verbose=1
      shift
      ;;
    --) shift
        break
        ;;
    -*) shift
        ;;
    *)  break
        ;;
  esac
done
! (( ignore_errors )) && set -eE
(( very_verbose )) && set -x


# User Function
btStartTest() {
  if (( bt_test_active )); then
    btEndTest
  fi
  
  btGoal="$1"
  btPrintf "start_test" "$btGoal"
  
  trap 'bt_test_succeeded=0; btEndTest' ERR
  bt_test_active=1
  bt_test_succeeded=1
}

# User Function
btExpectFail() {
  if (( bt_test_active )); then
    command="$@"
    rc=0 && $command || rc=$?
    [[ $rc -ne 0 ]]
  fi
}

# User Function
btInfo() {
  if (( bt_test_active )); then
    btEndTest
  fi

  btMsg="$1"
  btPrintf "info" "$btMsg"
}

# User Function
btWarn() {
  if (( bt_test_active )); then
    btEndTest
  fi

  btMsg="$1"
  btPrintf "warn" "$btMsg"
}

# User & System Function
btEndTest() {
  if (( bt_test_active )); then
    trap - ERR
    bt_test_active=0

    btPrintf "end_test" "$btGoal"

    if ! (( bt_test_succeeded )) && ! (( ignore_errors )); then
      btExitRoute 1
    fi
  fi
}

# User & System Function
btMute() {
  exec 5>&1 6>&2
  exec &> /dev/null
  btMuted=1
}

# User & System Function
btUnmute() {
  exec 1>&5 2>&6
  btMuted=0
}

# System Function --- Do not use
btExitRoute() {
  trap - EXIT ERR INT TERM
  btRc=$1

  if (( btMuted )); then
    btUnmute
  fi
  
  exit $btRc
}

# System Function --- Do not use
btPrintf() {
  bt_overwrite_last_line="\r"
  bt_success_indicator="\033[38;2;0;255;0m✔"
  bt_fail_indicator="\033[38;2;255;0;0m✗"
  bt_pending_indicator="\033[38;2;255;255;0m➤"
  bt_info_indicator="\033[38;2;0;255;255m🛈 "
  bt_warn_indicator="\033[38;5;208m⚠️ "
 
  bt_was_muted=0
  if (( btMuted )); then
    btUnmute
    bt_was_muted=1
  fi

  if [[ "$1" == "start_test" || "$1" == "end_test" ]] && ! (( verbose )); then
    printf "$bt_overwrite_last_line"
  fi
 
  if [[ "$1" == "end_test" ]] && (( bt_test_succeeded )); then
    printf "$bt_success_indicator " && bt_newline=1
  elif [[ "$1" == "end_test" ]] && ! (( bt_test_succeeded )); then
    printf "$bt_fail_indicator " && bt_newline=1
  elif [[ "$1" == "start_test" ]]; then
    printf "$bt_pending_indicator "
  elif [[ "$1" == "info" ]]; then
    printf "$bt_info_indicator" && bt_newline=1
  elif [[ "$1" == "warn" ]]; then
    printf "$bt_warn_indicator" && bt_newline=1
  fi
  
  if [[ "$1" == "start_test" || "$1" == "end_test" || "$1" == "info" || "$1" == "warn" ]]; then
    shift 1
  fi

  printf "$@\033[0m"

  if (( verbose )) || (( bt_newline )); then
    printf "\n"
    bt_newline=0
  fi

  if (( bt_was_muted )); then
    btMute
  fi
}


# Mute if the user requested it 
if ! (( verbose )); then
  btMute
fi


# Ensure the user can always SIGINT out
trap 'bt_test_succeeded=0; btExitRoute 1' INT
trap 'btEndTest' EXIT


# Install Coreutils to gather some data if we don't already have it
btInstallCoreUtils() {
  dnf install -y --allowerasing coreutils >/dev/null 2>&1 \
    || apt-get install -y --fix-broken coreutils >/dev/null 2>&1
}
set -o pipefail
dpkg -L coreutils >/dev/null 2>&1 || rpm -q coreutils >/dev/null 2>&1 || btInstallCoreUtils >/dev/null 2>&1


# Set some default values
bt_test_active=0
bt_test_succeeded=0


# System constants
bt_script_path="$(readlink -f "$0")"


# User constants
bt_tests_dir="$(dirname "$bt_script_path")"
bt_project_dir="$(dirname "$bt_tests_dir")"
if test -f /.dockerenv; then
  bt_in_container=1
else
  bt_in_container=0
fi


